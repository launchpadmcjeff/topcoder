package com.topcoder.tuts.graphs;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class BombManTest {

	private BombMan sut;
	
	@Before
	public void setUp() throws Exception {
		sut = new BombMan();
	}

	@Test
	public void testShortestPath0() {
		String[] maze = 
			{".....B.",
			 ".#####.",
			 ".#...#.",
			 ".#E#.#.",
			 ".###.#.",
			 "......."};
		int bombs =	1;
		int expected = 8;
		int actual = sut.shortestPath(maze, bombs);
		assertEquals(expected, actual);
	}
	
	@Test
	public void testShortestPath1() {
		String[] maze = {"B.#.#.#...E"};
		int bombs =	2;
		int expected = -1;
		int actual = sut.shortestPath(maze, bombs);
		assertEquals(expected, actual);
	}
	
	@Test
	public void testShortestPath2() {
		String[] maze = 
			{"..#####",
			 "B.#####",
			 "..#####",
			 "#######",
			 "####...",
			 "####.E."};
		int bombs =	4;
		int expected = 17;
		int actual = sut.shortestPath(maze, bombs);
		assertEquals(expected, actual);
	}
	
	@Test
	public void testShortestPath3() {
		String[] maze = 
			{".#.#.#.#B#...#.#...#.#...#.#...#.#...#.#.#.......",
			 ".#.#.#.#.#.###.###.#.###.#.#.###.###.#.#.#.###.##",
			 ".#.#.#...#.#.#.#.#.#...#.....#.#.#...#...#.#.#...",
			 ".#.#.###.#.#.#.#.#.###.#.#####.#.###.###.#.#.###.",
			 ".............#.#...#...#.....#.#.#...#.#.#.....#.",
			 "##.#######.###.#.#####.#.#####.#.###.#.#.#.#.####",
			 ".#.#.....#...#...#.#...#...#.#.#...#...#...#.....",
			 ".#######.#.#####.#.#.#.#.###.#.###.#.#####.#.####",
			 ".#.#.#.#...#.#.#.#.#.#.......#...#.#...#.#.#.....",
			 ".#.#.#.###.#.#.#.#.#####.#####.###.###.#.#.######",
			 ".....#...#.#...#...#...#...#...#...#.#.#.........",
			 "####.###.#.###.###.#.###.#.#.###.###.#.#.########",
			 ".......#.........#.#.#.#.#.#.#.#.........#...#...",
			 ".#.###.#########.#.#.#.#.###.#.#####.#.#.#.###.##",
			 ".#.#.........#.#.#.#.#.....#.#.#.....#.#.........",
			 "############.#.#.#.#.#.#####.#.#.################",
			 ".#...........#...#.#.#.#...#.#.#...#.#.#.....#...",
			 ".#####.#####.###.#.#.#.#.###.#.#.###.#.#.#####.##",
			 ".......#...#.#.#.....#...#...#.#.#.#.#...........",
			 "##########.#.#.#####.#.###.###.#.#.#.#.##########",
			 ".....#...#.....#.#...#.......#.#...#.......#.....",
			 "##.#.###.#.###.#.#.#.#.#####.#.#.###.#######.####",
			 "...#...#...#.......#.....#.#...#...#.......#.....",
			 "####.#.#.#########.#.###.#.#####.###.#.#######.##",
			 ".#...#...#.........#.#.....#.........#.#.#.#.....",
			 ".#####.#.#.###.#######.#.###.#.#########.#.#.####",
			 ".......#.#.#...#.......#.....#.#.#.......#.#.#.#.",
			 "########.#.#.#.#####.#.###.#.###.#.#######.#.#.#.",
			 ".........#.#.#.#.....#...#.#.........#.#.........",
			 "################.#.#.#.#.#.#.#.#######.#.########",
			 ".................#.#.#.#.#.#.#...........#.......",
			 "########.#####.#.###.#.#.#####.###.#.#####.###.##",
			 ".........#...#.#...#.#.#...#.....#.#.........#...",
			 ".#####.#####.#.###.#.###.#.#.#.#.#.#####.#.###.#.",
			 ".#.....#.........#.#.#...#.#.#.#.#.#.....#...#.#.",
			 "####.#####.###.#.#.#.#.#.#.###.###.#.#.#.#.#####.",
			 ".....#.....#.#.#.#.#.#.#.#.#...#...#.#.#.#...#...",
			 "####.#.#.###.#.#.###.#.###.#.#.#####.#.#.#.######",
			 ".....#.#.#.#...#...#.#...#.#.#...#...#.#.#.......",
			 "##########.#.#.#.#####.###.#.#.###.#.###.#####.##",
			 "...#.#...#...#.#.....#.#...#.#...#.#.#.......#...",
			 ".#.#.#.#.#.#.#.#.#.#.###.#.#########.###.#.#.#.#.",
			 ".#.#...#...#.#.#.#.#...#.#...#.......#...#.#.#.#.",
			 "##.###.#.#.###.#.#.#.#.#####.#.#.#.###.#.########",
			 ".......#.#...#.#.#.#.#.#.....#.#.#...#.#.........",
			 "####.#######.#.#####.#.###.#.#.###.#.#.#.########",
			 "E..#.......#.#.....#.#.#.#.#.#.#...#.#.#.........",
			 "##.#.#.#.###.###.###.###.#.#.###.#.#.#.#.#######.",
			 ".....#.#...#.#.....#.#.....#...#.#.#.#.#.....#..."};
		int bombs =	3;
		int expected = 76;
		int actual = sut.shortestPath(maze, bombs);
		assertEquals(expected, actual);
	}

}
